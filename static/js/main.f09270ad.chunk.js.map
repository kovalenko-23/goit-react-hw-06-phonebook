{"version":3,"sources":["Components/ContactsForm/ContactsForm.styled.jsx","Components/ContactsForm/ContactsForm.jsx","Components/ContactsItem/ContactsItem.styled.jsx","Components/ContactsItem/ContactsItem.jsx","Components/ContactList/ContactList.styled.jsx","Components/ContactList/ContactsList.jsx","Components/ContactsFilter/ContactsFilter.styled.jsx","Components/ContactsFilter/ContactsFilter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","styled","form","Label","label","props","bottom","Input","input","ButtonAdd","button","ContactsForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","event","currentTarget","value","resetSate","preventDefault","autoComplete","type","onChange","pattern","title","required","Contact","li","ContactItem","p","DeleteContactBtn","ContactsItem","id","onDeleteButton","onClick","List","ul","ContactsList","contacts","map","Wrapper","div","Filterlabel","FilterInput","ContactsFilter","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","getVisibleContacts","contact","toLowerCase","includes","toast","error","icon","fill","newContact","shortid","generate","success","filteredContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f09270ad.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  padding: 20px;\n  border: 1px solid black;\n`;\n\nexport const Label = styled.label`\n  display: inline-flex;\n  justify-content: space-between;\n  font-weight: bold;\n  margin-bottom: ${(props) => (props.bottom ? \"20px\" : \"8px\")};\n`;\n\nexport const Input = styled.input`\n  margin-left: 6px;\n`;\n\nexport const ButtonAdd = styled.button`\n  height: 30px;\n  font-weight: bold;\n  font-size: 16px;\n  background-color: #c1f3d9;\n`;\n","import { useState } from 'react';\nimport { Form, Label, Input, ButtonAdd } from './ContactsForm.styled';\nimport PropTypes from 'prop-types';\n\nexport function ContactsForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    resetSate();\n  };\n\n  const resetSate = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </Label>\n      <Label bottom>\n        Number\n        <Input\n          autoComplete=\"off\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </Label>\n      <ButtonAdd type=\"submit\">Add to contacts</ButtonAdd>\n    </Form>\n  );\n}\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Contact = styled.li`\n  display: inline-flex;\n  justify-content: space-between;\n  width: 300px;\n  margin-bottom: 20px;\n  padding: 10px;\n  font-size: 15px;\n  border: 1px solid;\n`;\n\nexport const ContactItem = styled.p`\n  margin: 0;\n  margin-right: 6px;\n`;\nexport const DeleteContactBtn = styled.button`\n  font-size: 12px;\n  font-weight: bold;\n`;\n","import { Contact, ContactItem, DeleteContactBtn } from './ContactsItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactsItem = ({ id, name, number, onDeleteButton }) => {\n  return (\n    <Contact id={id}>\n      <ContactItem>{name}:</ContactItem>\n      <ContactItem>{number}</ContactItem>\n      <DeleteContactBtn type=\"button\" onClick={() => onDeleteButton(id, name)}>\n        Delete\n      </DeleteContactBtn>\n    </Contact>\n  );\n};\n\nexport default ContactsItem;\n\nContactsItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteButton: PropTypes.func,\n};\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\n","import ContactsItem from '../ContactsItem/ContactsItem';\nimport { List } from './ContactList.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactsList = ({ contacts, onDeleteButton }) => {\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ContactsItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          onDeleteButton={onDeleteButton}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  onDeleteButtonacts: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  margin-bottom: 30px;\n`;\nexport const Filterlabel = styled.label`\n  padding: 15px;\n  border: 1px solid black;\n  font-weight: bold;\n`;\nexport const FilterInput = styled.input`\n  margin-left: 8px;\n`;\n","import { Wrapper, Filterlabel, FilterInput } from './ContactsFilter.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactsFilter = ({ value, onChange }) => {\n  return (\n    <Wrapper>\n      <Filterlabel>\n        Find\n        <FilterInput\n          type=\"text\"\n          name=\"message\"\n          value={value}\n          onChange={onChange}\n        />\n      </Filterlabel>\n    </Wrapper>\n  );\n};\n\nContactsFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useEffect, useState } from 'react';\nimport shortid from 'shortid';\nimport styled from '@emotion/styled';\nimport ContactsForm from './Components/ContactsForm/ContactsForm';\nimport ContactsList from './Components/ContactList/ContactsList';\nimport { ContactsFilter } from './Components/ContactsFilter/ContactsFilter';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { FaBan } from 'react-icons/fa';\n\nconst Wrapper = styled.div`\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const handleOnSubmitForm = (name, number) => {\n    const contactsName = contacts.map(contact => contact.name);\n    if (contactsName.includes(name)) {\n      toast.error(`You already have ${name} in your contacts!`, {\n        icon: <FaBan fill=\"red\" />,\n      });\n    } else {\n      const newContact = {\n        id: shortid.generate(),\n        name,\n        number,\n      };\n\n      setContacts(contacts => [newContact, ...contacts]);\n      toast.success(`${name} added to your contacts!`);\n    }\n  };\n\n  const hendleFinder = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const deleteContact = (id, name) => {\n    const filteredContacts = contacts.filter(contact => contact.id !== id);\n    setContacts(filteredContacts);\n    toast.success(`${name} removed from your contacts`);\n  };\n\n  const getVisibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter),\n  );\n\n  return (\n    <Wrapper>\n      <Toaster />\n      <h1>Phonebook</h1>\n      <ContactsForm onSubmit={handleOnSubmitForm} />\n      <h2>Contacts</h2>\n      <ContactsFilter value={filter} onChange={hendleFinder} />\n      <ContactsList\n        contacts={getVisibleContacts}\n        onDeleteButton={deleteContact}\n      />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}